{"version":3,"sources":["store/weatherSlice.ts","store/alertSlice.ts","components/From.tsx","components/WeatherCard.tsx","components/WeatherCards.tsx","components/Alert.tsx","App.tsx","store/rootReducer.ts","index.tsx"],"names":["formatWeather","res","a","days","list","reduce","accumulator","currentValue","obj","date","dt_txt","icon","weather","clouds","all","wind","speed","temp","main","temp_feels_like","feels_like","split","push","city_name","city","name","country","GetWeatherBySityName","createAsyncThunk","sityName","fetch","process","response","json","GetWeather","coordinates","lat","lon","initialState","localStorage","getItem","JSON","parse","sities","errors","weatherSlice","createSlice","reducers","deleteCity","state","action","filter","item","payload","delError","extraReducers","builder","addCase","fulfilled","rejected","console","log","i","length","actions","alertSlice","isAlert","alertData","message","description","type","setAlert","deleteAlert","From","useSelector","refInput","useRef","dispatch","useDispatch","labelCol","span","wrapperCol","initialValues","remember","onFinish","values","current","input","value","toLowerCase","cityName","className","Item","label","rules","required","ref","offset","htmlType","TabPane","Tabs","WeatherCard","props","title","Date","index","getDay","defaultActiveKey","tabPosition","style","height","Object","keys","map","_","tab","src","alt","WeatherCards","onEdit","activeKey","hideAdd","k","key","AlertComponent","useEffect","setTimeout","showIcon","Header","Layout","Sider","Content","App","alert","dataAlert","navigator","geolocation","getCurrentPosition","position","coords","latitude","toString","longitude","stringify","store","configureStore","reducer","subscribe","setItem","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46eec1d6.chunk.js","sourcesContent":["import {\n    createSlice,\n    createAsyncThunk,\n    PayloadAction\n} from '@reduxjs/toolkit'\n\nimport {\n    WeatherDay,\n    WeatherCity,\n    AccumulatorDay,\n    WeatherApi,\n    WeatherDayApi,\n    Coordinates\n} from '../interfaces/weather'\n\nasync function formatWeather(res: WeatherApi) {\n    let days: {\n        [value: string]: Array<WeatherDay>\n    } = res.list.reduce((accumulator: AccumulatorDay, currentValue: WeatherDayApi) => {\n\n        let obj: WeatherDay = {\n            date: currentValue.dt_txt,\n            icon: `http://openweathermap.org/img/wn/${currentValue.weather[0].icon}@2x.png`,\n            clouds: currentValue.clouds.all,\n            wind: currentValue.wind.speed,\n            temp: currentValue.main.temp,\n            temp_feels_like: currentValue.main.feels_like\n        }\n\n        if (!accumulator[currentValue.dt_txt.split(' ')[0]]) {\n            accumulator[currentValue.dt_txt.split(' ')[0]] = [obj]\n        } else {\n            accumulator[currentValue.dt_txt.split(' ')[0]].push(obj)\n        }\n\n        return accumulator\n    }, {})\n\n    return {\n        city_name: res.city.name,\n        country: res.city.country,\n        days: days,\n    } as WeatherCity\n}\n\nexport const GetWeatherBySityName = createAsyncThunk(\n    \"weather/GetWeatherBySityName\",\n        async (sityName: string, { }) => {\n            const response: Response = await fetch(`\n            https://api.openweathermap.org/data/2.5/forecast?q=${sityName}&appid=${process.env.REACT_APP_OPEN_WEATHER_KEY}&units=metric`)\n\n            const res: WeatherApi = await response.json();\n\n            return await formatWeather(res) as WeatherCity\n        })\n\nexport const GetWeather = createAsyncThunk(\n    \"weather/fetchWeather\",\n    async (coordinates: Coordinates, {}) => {\n        const response: Response = await fetch(`\n            https://api.openweathermap.org/data/2.5/forecast?lat=${coordinates.lat}&lon=${coordinates.lon}&appid=${process.env.REACT_APP_OPEN_WEATHER_KEY}&units=metric`)\n\n        const res: WeatherApi = await response.json();\n\n        return await formatWeather(res) as WeatherCity\n    })\n\ninterface initialState {\n    sities: Array<WeatherCity>,\n    errors: boolean\n}\n\nconst initialState: initialState = localStorage.getItem('reduxState')\n    ? JSON.parse(localStorage.getItem('reduxState') as string) as initialState : {\n        sities: [],\n        errors: false\n    } as initialState\n\n\nexport const weatherSlice = createSlice({\n    name: 'weather',\n    initialState,\n    reducers: {\n        deleteCity: (state, action: PayloadAction<string>) => {\n            state.sities = state.sities.filter((item: WeatherCity)  => {\n                return item.city_name !== action.payload\n            })\n        },\n        delError: (state) => {\n            state.errors = false\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(GetWeatherBySityName.fulfilled, (state, action) => {\n            state.sities.push(action.payload)\n        })\n        builder.addCase(GetWeatherBySityName.rejected, (state) => {\n            console.log('error');\n            state.errors = true\n        })\n        builder.addCase(GetWeather.fulfilled, (state, action) => {\n            for (let i = 0; i < state.sities.length; i++) {\n                if (state.sities[i].city_name == action.payload.city_name) {\n                    return\n                }\n\n            }\n            state.sities.push(action.payload)\n        })\n        builder.addCase(GetWeather.rejected, (state) => {\n            console.log('error');\n        })\n    }\n})\n\nexport const { deleteCity, delError } = weatherSlice.actions\nexport default weatherSlice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { AlertInterface } from '../interfaces/alert'\n\ninterface initialState {\n    isAlert: boolean,\n    alertData: AlertInterface\n}\n\nconst initialState: initialState = {\n    isAlert: false,\n    alertData: {\n        message: \"\",\n        description: \"\",\n        type: \"info\"\n    }\n}\n\nexport const alertSlice = createSlice({\n    name: 'alert',\n    initialState,\n    reducers: {\n        setAlert: (state, action: PayloadAction<AlertInterface>) => {\n            state.alertData = action.payload\n            state.isAlert = true\n        },\n        deleteAlert: (state) => {\n            state.isAlert = false\n        }\n    }\n})\n\nexport const { setAlert, deleteAlert } = alertSlice.actions\nexport default alertSlice.reducer\n","import { useDispatch, useSelector } from 'react-redux'\nimport { FC, useRef } from 'react';\n\nimport { Form, Input, Button } from 'antd';\nimport { GetWeatherBySityName } from '../store/weatherSlice';\nimport { WeatherCity } from '../interfaces/weather';\nimport { RootState } from '../store/rootReducer';\nimport { setAlert } from '../store/alertSlice';\n\n\nexport const From: FC = () => {\n    const weather: Array<WeatherCity> = useSelector((state: RootState) => state.weather.sities)\n    const refInput = useRef<Input>(null);\n\n    const dispatch = useDispatch()\n\n    const onFinish = (values: { cityName: string }) => {\n        if (refInput && refInput.current) {\n            refInput.current.input.value = '';\n        }\n\n        for (let i = 0; i < weather.length; i++) {\n            if (weather[i].city_name.toLowerCase() === values.cityName.toLowerCase()) {\n                dispatch(setAlert({\n                    message: \"You can't add a city\",\n                    description: \"The city has already been added\",\n                    type: \"warning\"\n                }))\n                return\n            }\n        }\n\n        dispatch(GetWeatherBySityName(values.cityName))\n    };\n\n    return (\n        <Form\n            name=\"basic\"\n            labelCol={{ span: 8 }}\n            wrapperCol={{ span: 16 }}\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            className=\"form\" >\n\n            <p className=\"from__title\" >Type cities for example london or vladimir</p>\n\n            <Form.Item\n                label=\"city name\"\n                name=\"cityName\"\n                rules={[{ required: true, message: 'Please input city name!' }]} >\n                <Input ref={refInput} />\n            </Form.Item>\n\n\n            <Form.Item wrapperCol={{ offset: 1, span: 16 }}>\n                <Button className=\"submitBtn\" type=\"primary\" htmlType=\"submit\">\n                    Add city\n                </Button>\n            </Form.Item>\n        </Form>\n    )\n}\n","import React from 'react'\n\nimport { Card, Tabs } from 'antd'\nimport { WeatherCity } from '../interfaces/weather';\nconst { TabPane } = Tabs;\n\nexport const WeatherCard = (props: { index: string, city: WeatherCity }) => {\n\n    const days: Array<string> = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\"\n    ]\n\n    return (\n        <Card className=\"weather_card\" title={days[new Date(props.index).getDay()] + \":\"} >\n            <Tabs defaultActiveKey=\"0\" tabPosition={'top'} style={{ height: 180 }} >\n                {Object.keys(props.city.days[props.index]).map((_: string, i: number) => (\n                    <TabPane\n                        key={i}\n                        tab={props.city.days[props.index][i].date.split(' ')[1].split(':')[0]\n                            + \":\" + props.city.days[props.index][i].date.split(' ')[1].split(':')[1]}>\n\n                        <img\n                            className=\"weather_image\"\n                            src={props.city.days[props.index][i].icon}\n                            alt=\"weather icon\" ></img>\n\n                        <p className=\"temperature\" >\n                            <span className=\"temperature__main\" >\n                                temperature: {props.city.days[props.index][i].temp}°\n                            </span>\n                            <span className=\"temperature__feels_like\" >\n                                feels like: {props.city.days[props.index][i].temp_feels_like}°\n                            </span>\n                        </p>\n                        <div className=\"clouds_wind\" >\n                            <p className=\"clouds\" >clouds: {props.city.days[props.index][i].clouds}%</p>\n                            <p className=\"wind\" >wind: {props.city.days[props.index][i].wind} M/s</p>\n                        </div>\n                    </TabPane>\n                ))}\n            </Tabs>\n        </Card>\n    )\n}\n","\nimport { RootState } from '../store/rootReducer'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Card, Tabs } from 'antd'\nimport { WeatherCity } from '../interfaces/weather';\n\nimport { WeatherCard } from './WeatherCard'\n\nimport { deleteCity } from '../store/weatherSlice'\n\nconst { TabPane } = Tabs;\n\nexport const WeatherCards = () => {\n    const dispatch = useDispatch()\n    const weather: Array<WeatherCity> = useSelector((state: RootState) => state.weather.sities)\n\n    const onEdit = (activeKey: string | object) => {\n        if (typeof activeKey == \"string\") {\n            dispatch(deleteCity(activeKey))\n        } else {\n            console.log('create');\n        }\n    };\n\n    return (\n        <Tabs\n            type=\"editable-card\"\n            onEdit={onEdit}\n            defaultActiveKey=\"0\"\n            hideAdd={true}\n            tabPosition={'top'}>\n            {weather.map((city: WeatherCity, k: number) => {\n            return (\n                <TabPane key={city.city_name} tab={city.city_name} >\n                    {Object.keys(city.days).map(function (key: string) {\n                        return (<div key={key} > <WeatherCard index={key} city={city} /> </div>)\n                    })}\n                </TabPane>)\n            })}\n        </Tabs>\n    )\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux'\nimport { Alert } from 'antd';\nimport { AlertInterface } from '../interfaces/alert'\nimport { setTimeout } from 'timers';\nimport { deleteAlert } from '../store/alertSlice';\n\nexport const AlertComponent = (props: AlertInterface)  => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        setTimeout(() => {\n            dispatch(deleteAlert())\n        }, 3000)\n    }, [])\n\n    return (\n        <Alert\n            message={props.message}\n            description={props.description}\n            type={props.type}\n            showIcon\n        />\n    )\n}\n","import { FC, useEffect } from 'react';\nimport './App.css';\n\nimport { RootState } from './store/rootReducer'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { delError, GetWeather } from './store/weatherSlice';\n\nimport { Layout } from 'antd'\n\nimport { From } from './components/From'\nimport { WeatherCards } from './components/WeatherCards'\nimport { WeatherCity } from './interfaces/weather';\n\nimport { AlertComponent } from './components/Alert'\nimport { AlertInterface } from './interfaces/alert';\nimport { setAlert } from './store/alertSlice';\n\nconst { Header, Sider, Content } = Layout;\n\nconst App: FC = () => {\n  const dispatch = useDispatch()\n\n  const weather: Array<WeatherCity> = useSelector((state: RootState) => state.weather.sities)\n  const isAlert: boolean = useSelector((state: RootState) => state.alert.isAlert)\n  const dataAlert: AlertInterface = useSelector((state: RootState) => state.alert.alertData)\n  const isError: boolean = useSelector((state: RootState) => state.weather.errors)\n\n  if (isError) {\n    dispatch(setAlert({\n      message: \"You can't add a city\",\n      description: \"The city was not found\",\n      type: \"error\"\n    }))\n    dispatch(delError())\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      dispatch(GetWeather({\n        lat: position.coords.latitude.toString(),\n        lon: position.coords.longitude.toString(),\n      }))\n    })\n  }, [navigator])\n\n  return (\n      <Layout>\n        <Header className=\"header\" >\n          <h1 className=\"header__title\" >Weather</h1>\n        </Header>\n\n        {isAlert &&\n          <AlertComponent\n              message={dataAlert.message}\n              description={dataAlert.description}\n              type={dataAlert.type}\n          />}\n\n        <Layout className=\"main\" >\n          <Sider className=\"sider\" >\n            <From />\n          </Sider>\n          <Content className=\"content\" >\n            {JSON.stringify(weather).length > 3 && <WeatherCards />}\n          </Content>\n        </Layout>\n      </Layout>\n  )\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { weatherSlice } from './weatherSlice'\nimport { alertSlice } from './alertSlice'\n\nconst store = configureStore({\n    reducer: {\n        weather: weatherSlice.reducer,\n        alert: alertSlice.reducer\n    }\n})\n\nconst unsubscribe = store.subscribe(() => {\n    localStorage.setItem('reduxState', JSON.stringify(store.getState().weather))\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport store from './store/rootReducer'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}